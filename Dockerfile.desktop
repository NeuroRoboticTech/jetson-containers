# Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

ARG BASE_IMAGE=nvidia/cuda:12.1.0-devel-ubuntu18.04
FROM ${BASE_IMAGE}

#
# setup environment
#
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_HOME="/usr/local/cuda"
ENV PATH="/usr/local/cuda/bin:${PATH}"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"
ENV LLVM_CONFIG="/usr/bin/llvm-config-9"

ARG MAKEFLAGS=-j$(nproc) 
ARG PYTHON3_VERSION=3.6

RUN printenv

RUN apt update
RUN apt-get install -y software-properties-common

RUN add-apt-repository main
RUN add-apt-repository restricted
RUN add-apt-repository universe
RUN add-apt-repository multiverse
RUN apt update

#
# apt packages
#
RUN apt-get install -y --no-install-recommends \
        sudo \
        python3-pip \
		libpython3-dev \
		python3-dev \
		python3-numpy \
		python3-setuptools \
		python3-matplotlib \
		build-essential \
		gfortran \
		git \
		cmake \
		curl \
		libopenblas-dev \
		liblapack-dev \
		libblas-dev \
		libhdf5-serial-dev \
		hdf5-tools \
		libhdf5-dev \
		zlib1g-dev \
		zip \
		libjpeg8-dev \
		openmpi-bin \
		openmpi-common \
		protobuf-compiler \
		libprotoc-dev \
		llvm-9 \
		llvm-9-dev \
		libffi-dev \
		libsndfile1 \
		wget \
        libnvinfer-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN apt-get update && apt install -y  build-essential pkg-config libgstreamer1.0 libgstreamer1.0-dev \
     libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev libjson-glib-dev \
	 libnvinfer-dev libnice-dev autoconf libtool gtk-doc-tools libglib2.0-dev \
	 freeglut3-dev libglew-dev python3-libnvinfer-dev dialog \
	 gstreamer1.0-nice libssl-dev libreadline-dev gstreamer1.0-plugins-ugly \
	 libsrtp0-dev libsrtp2-dev libgstrtspserver-1.0-dev gstreamer1.0-rtsp  libsoup2.4-dev \
     libgtk-3-dev libavcodec-dev libavformat-dev libswscale-dev libv4l-dev \
	 libxvidcore-dev libx264-dev libjpeg-dev libpng-dev libtiff-dev \
	 gfortran openexr libatlas-base-dev libtbb2 libtbb-dev libdc1394-22-dev


#
# pull protobuf-cpp from TF container
#
# ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=cpp

# COPY --from=tensorflow /usr/local/bin/protoc /usr/local/bin
# COPY --from=tensorflow /usr/local/lib/libproto* /usr/local/lib/
# COPY --from=tensorflow /usr/local/include/google /usr/local/include/google


#
# python packages from TF/PyTorch containers
# note:  this is done in this order bc TF has some specific version dependencies
#
# COPY --from=pytorch /usr/local/lib/python2.7/dist-packages/ /usr/local/lib/python2.7/dist-packages/
# COPY --from=pytorch /usr/local/lib/python${PYTHON3_VERSION}/dist-packages/ /usr/local/lib/python${PYTHON3_VERSION}/dist-packages/

# COPY --from=tensorflow /usr/local/lib/python2.7/dist-packages/ /usr/local/lib/python2.7/dist-packages/
# COPY --from=tensorflow /usr/local/lib/python${PYTHON3_VERSION}/dist-packages/ /usr/local/lib/python${PYTHON3_VERSION}/dist-packages/

#
# install cudnn
#
COPY cudnn-linux-x86_64-8.8.1.3_cuda12-archive.tar.xz .
RUN tar -xvf cudnn-linux-x86_64-8.8.1.3_cuda12-archive.tar.xz && \
    cp cudnn-*-archive/include/cudnn*.h /usr/local/cuda/include && \
	cp -P cudnn-*-archive/lib/libcudnn* /usr/local/cuda/lib64 && \
	chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn*

#
# install tensorflow
#
RUN python3 -m pip install --upgrade pip
RUN pip3 install --no-cache-dir tensorflow

#
# python pip packages
#
RUN pip3 install --no-cache-dir --ignore-installed pybind11 
# RUN pip3 install --no-cache-dir --verbose onnx
RUN pip3 install --no-cache-dir --verbose scipy==1.5.4
RUN pip3 install --no-cache-dir --verbose scikit-learn==0.24.2
RUN pip3 install --no-cache-dir --verbose pandas==1.1.5
# RUN pip3 install --no-cache-dir --verbose pycuda
RUN pip3 install --no-cache-dir --verbose numba boto3
RUN pip3 install --no-cache-dir --verbose torchvision torch


#
# CuPy
#
# ARG CUPY_VERSION=v11.5.0
# ARG CUPY_NVCC_GENERATE_CODE="arch=compute_53,code=sm_53;arch=compute_62,code=sm_62;arch=compute_72,code=sm_72;arch=compute_87,code=sm_87"

# RUN git clone -b ${CUPY_VERSION} --recursive https://github.com/cupy/cupy cupy && \
#     cd cupy && \
#     pip3 install --no-cache-dir fastrlock && \
#     python3 setup.py install --verbose && \
#     cd ../ && \
#     rm -rf cupy


#
# PyCUDA
#
# RUN pip3 uninstall -y pycuda
# RUN pip3 install --no-cache-dir --verbose pycuda six


# 
# install OpenCV (with CUDA)
#
RUN git clone https://github.com/opencv/opencv.git
RUN git clone https://github.com/opencv/opencv_contrib.git

RUN cd ./opencv && mkdir build && cd ./build && cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_C_EXAMPLES=ON \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules \
	-D WITH_CUDA=ON -D WITH_CUDNN=ON -D OPENCV_DNN_CUDA=ON \
	-D ENABLE_FAST_MATH=1 -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 \
    -D BUILD_EXAMPLES=ON .. && make -j$(nproc) && make install

# Make sure /usr/local/lib/python3.6/site-packages/ shows up in the site packages for python.
RUN echo "/usr/local/lib/python3.6/site-packages/" > /usr/local/lib/python3.6/dist-packages/usrlocal.pth

# vulnerability fixed in: 0.18.3 (GHSA-v3c5-jqr6-7qm8 - https://github.com/advisories/GHSA-v3c5-jqr6-7qm8)
RUN pip3 install --upgrade --verbose future && \
    pip3 show future

WORKDIR /home/dev
